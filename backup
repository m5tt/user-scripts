#!/bin/bash

## small custom backup script using rsync and ssh
## usage: backup <user> 
## requires config dir /home/<user>/.backup


if [ $# -eq 0 ] ; then
    echo "Missing argument"
    exit 1
fi

## Constants
USER=$1
SRC="/"                             ## where to start backing up
USER_HOME="/home/$USER"             ## run as root so cant use $HOME and want to keep configs local
BACKUP_CONFIG_DIR="$USER_HOME/.backup"   
LOG_FILE="$BACKUP_CONFIG_DIR/backup.log"
CONFIG_FILE="$BACKUP_CONFIG_DIR/backup.config"
PREV_BACKUP="$BACKUP_CONFIG_DIR/prevbackup.txt"
EXCLUDES_FILE="$BACKUP_CONFIG_DIR/excludes.txt"
KEY_FILE="$USER_HOME/.ssh/id_rsa"

## Error checking: make sure backup conf dir exists, 
if [ ! -d $BACKUP_DIR ] ; then
    echo "Backup directory doesnt exist"
	exit 1
fi

## that there root
if [ "$EUID" -ne 0 ] ; then
	echo "Error: No root, exiting"
	echo "Error: No root, exiting" >> $LOG_FILE
	exit 1
fi

## and that the key file and config file are present
if [ ! -f $KEY_FILE ] || [ ! -f $CONFIG_FILE ] ; then
	echo "Error: missing files, exiting"
	echo "Error: missing files, exiting" >> $LOG_FILE
	exit 1
fi

## Change to check that were on network
## TODO: make this check server is up and on home network as well
wget -q --tries=10 --timeout=30 --spider -O - http://google.com > /dev/null
if [ $? -ne 0 ] ; then
	echo "No internet connection, exiting" >> $LOG_FILE
	exit 1
fi

## Perform backup
# TODO: use full timestamp instead of just date

#today=`date -I` ## This will be the name of the new backup dir
today=`date +%F-%T`

## Get most recent backup name for hardlinking
## and for differential
prev_date=$(head -n 1 $PREV_BACKUP)
prev_backup="../${prev_date:-""}"       ## prev_date or blank

echo "Backup started: $today" >> $LOG_FILE

## quick and dirty config file parsing
source $CONFIG_FILE

dest="$remote_user@$server_ip:$dest_dir/$today"
ssh="ssh -p $port -i $KEY_FILE"
opts="-aA --delete --links --partial --log-file=$LOG_FILE --exclude-from=$EXCLUDES_FILE --link-dest=$prev_backup"

echo "Using command: rsync $opts -e $ssh $SRC $dest" >> $LOG_FILE

# finally run backup
rsync $opts -e "$ssh" $SRC $dest

if [ $? -eq 0 ] ; then
	echo $today > $PREV_BACKUP      # update prev backup
	echo "Successful backup:" >> $LOG_FILE
    echo "Started: $today" >> $LOG_FILE
    echo "Finished: $(date +%F-%T)" >> $LOG_FILE
else
	echo "Backup failed: $today" >> $LOG_FILE
fi
